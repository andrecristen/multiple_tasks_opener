<%= form_with model: @issueOrigin, class: "new_issue", url: execution_tasks_path(open_from: @issueOrigin.id), method: :post, html: { multipart: true } do |form| %>
  <div class="related_tasks">
    <% if @config.present? %>
        <% @config.each_with_index do |tracker, index| %>
          <div class="box">
            <fieldset class="tracker-card" data-index="<%= index %>">
              <legend>
                <h1><%= Tracker.find_by(id: tracker['type'])&.name || 'Tipo de Atividade não encontrado' %></h1>
              </legend>
              <%= hidden_field_tag "related_tasks[#{index}][type]", tracker['type'] %>

              <% default_subject = "[#{Tracker.find_by(id: tracker['type'])&.name}] #{@issueOrigin.subject}" %>
              <% default_description = tracker['template'] %>

              <div class="form-group">
                <%= label_tag "related_tasks[#{index}][subject]", "Título*", class: "form-label" %>
                <%= text_field_tag "related_tasks[#{index}][subject]", default_subject, class: "form-control", required: true %>
              </div>

              <div class="form-group">
                <%= label_tag "related_tasks[#{index}][assigned_to_id]", "Atribuído para*", class: "form-label" %>
                <%= select_tag "related_tasks[#{index}][assigned_to_id]", options_for_select(User.all.collect { |u| [u.name, u.id] }, User.current.id), class: "form-select", required: true %>
              </div>

              <div class="form-group">
                <%= label_tag "related_tasks[#{index}][estimated_hours]", "Tempo Estimado", class: "form-label" %>
                <%= text_field_tag "related_tasks[#{index}][estimated_hours]", nil, class: "form-control", placeholder: "Horas estimadas" %>
              </div>

              <% tracker_object = Tracker.find_by(id: tracker['type']) %>
              <% if tracker_object %>
                <% related_task = Issue.new(project: @issueOrigin.project, tracker: tracker_object) %>
                <%= render 'issues/form_custom_fields', '@issue': related_task %>
              <% end %>

              <div class="form-group">
                <%= label_tag "related_tasks[][description]", "Descrição*", class: "form-label" %>
                <%= text_area_tag "related_tasks[#{index}][description]", default_description, class: "form-control wiki-edit", rows: 30, required: true, data: { auto_complete: true }, id: "related_tasks_#{index}_description" %>
              </div>
              <%= wikitoolbar_for "related_tasks_#{index}_description", preview_issue_path(:project_id => @issueOrigin.project)%>

              <div class="form-group">
                <%= label_tag "related_tasks[#{index}][attachments]", "Anexos", class: "form-label" %>
                <%= render partial: 'attachments/form', locals: { container: @issueOrigin, attachment_param: "related_tasks[#{index}][attachments]" } %>
              </div>

            </fieldset>
          </div>
        <% end %>
    <% else %>
      <div class="flash error" id="flash_notice">Tipo de tarefa não possui nenhuma configuração definida.<a href="/settings/plugin/multiple_tasks_opener">Realize a configuração.</a></div>
    <% end %>
  </div>
  <br/>
  <%= form.submit "Criar Tarefas", class: "btn btn-primary mt-3" %>
<% end %>

<script>
    document.addEventListener('DOMContentLoaded', function() {

        if (typeof addFile === 'function') {
            const originalAddFile = addFile;
            addFile = function(inputEl, file, eagerUpload) {
                const nextAttachmentId = Date.now();
                addFile.nextAttachmentId = nextAttachmentId;
                originalAddFile.nextAttachmentId = nextAttachmentId;
                if (handleFileDropEvent.target !== "") {
                    inputEl = $(handleFileDropEvent.target).parent().parent().parent().parent().find('input:file.filedrop');
                }
                originalAddFile(inputEl, file, eagerUpload);
                handleFileDropEvent.target = "";
            };
        }

        function fixPreviewImages() {
            $(".wiki-preview img").each(function () {
                let img = $(this);
                let src = img.attr("src");
                if (src && !src.startsWith("http") && !src.startsWith("/attachments/download/")) {
                    // Encontra o campo filename correspondente ao src da imagem
                    let descriptionInput = $("input.filename").filter(function () {
                        return $(this).val().trim() === src.trim();
                    }).first();
                    if (descriptionInput.length) {
                        // Pega o container do anexo
                        let attachmentContainer = descriptionInput.parent();
                        // Encontra o campo token dentro do container
                        let tokenInput = attachmentContainer.find("input.token");
                        if (tokenInput.length) {
                            let attachmentId = tokenInput.val().split(".")[0]; // Extrai o ID correto
                            img.attr("src", `/attachments/download/${attachmentId}/${src}`);
                        }
                    }
                }
            });
        }

        // Monitorar mudanças em todas as instâncias de .wiki-preview
        document.querySelectorAll(".wiki-preview").forEach(previewContainer => {
            const observer = new MutationObserver(() => {
                fixPreviewImages();
            });
            observer.observe(previewContainer, { childList: true, subtree: true });
        });

        // Encontra todos os campos de custom field
        const customFields = document.querySelectorAll('[name^="issue[custom_field_values]"]');
        customFields.forEach(function(field) {
            // Obtém o ID do custom field
            const customFieldId = field.name.match(/\d+/)[0];
            const fieldset = field.closest('fieldset[data-index]');
            if (fieldset) {
                const dataIndex = fieldset.getAttribute('data-index');
                field.name = `related_tasks[${dataIndex}][custom_field_values][${customFieldId}]`;
            } else {
                field.name = `related_tasks[][custom_field_values][${customFieldId}]`;
            }
            // Verifica se o campo é obrigatório
            const isRequired = field.closest('p').querySelector('span.required') !== null;
            if (isRequired) {
                field.setAttribute('required', 'true');
            }
        });

    });
</script>

<style>
    .related_tasks {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .tracker-card {
        border: 1px solid #ddd;
        padding: 15px;
        border-radius: 8px;
        background: #f9f9f9;
    }

    .form-group {
        margin-bottom: 10px;
    }

    .form-label {
        font-weight: bold;
        display: block;
    }

    .form-control,
    .form-select {
        width: 100%;
        margin: 8px 0;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .splitcontent {
        display: block!important;
    }

    .splitcontent p {
        display: grid!important;
        margin: 0 0 10px;
    }

    .splitcontent p label {
        font-weight: bold;
    }

    .splitcontent p input {
        width: 100%!important;
    }

    .splitcontent p textarea {
        width: 100%!important;
    }

    .splitcontentright {
        margin-left: 0!important;
    }

    .splitcontentleft {
        margin-right: 0!important;
    }

</style>